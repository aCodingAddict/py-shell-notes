$? 表示上一行命令运行后的返回值
$* 表示传入脚本的所有参数数组
$# 表示传入脚本的参数的个数
$@ 表示所有参数

$0: 脚本本身文件名称
$1: 命令行第一个参数,$2为第二个,以此类推

0 标准输入
1 标准输出
2 标准错误输出
1>&2 标准输出使用标准错误输出的通道
2>&1 标准错误输出使用标准输出的通道
&>filename 标准输出和标准错误输出使用同一个目标文件

shell 中的 ${},##, %% ,: - ,: +, ? 的使用
    假设我们定义了一个变量为: 
    file=/dir1/dir2/dir3/my.file.txt
    
    可以用${ }分别替换得到不同的值: 
    ${file#*/}: 删掉第一个/ 及其左边的字符串: dir1/dir2/dir3/my.file.txt
    ${file##*/}: 删掉最后一个/  及其左边的字符串: my.file.txt
    ${file#*.}: 删掉第一个.  及其左边的字符串: file.txt
    ${file##*.}: 删掉最后一个.  及其左边的字符串: txt
    ${file%/*}: 删掉最后一个 /  及其右边的字符串: /dir1/dir2/dir3
    ${file%%/*}: 删掉第一个/  及其右边的字符串: (空值)
    ${file%.*}: 删掉最后一个 .  及其右边的字符串: /dir1/dir2/dir3/my.file
    ${file%%.*}: 删掉第一个 .   及其右边的字符串: /dir1/dir2/dir3/my
    
    记忆的方法为: 
    # 是去掉左边（键盘上 # 在 $ 的左边）
    % 是去掉右边（键盘上 % 在 $ 的右边）
    单一符号是最小匹配;两个符号是最大匹配
    ${file:0:5}: 提取最左边的 5 个字节: /dir1
    ${file:5:5}: 提取第5个字节右边的连续 5 个字节: /dir2
    
    也可以对变量值里的字符串作替换: 
    ${file/dir/path}: 将第一个 dir 替换为 path: /path1/dir2/dir3/my.file.txt
    ${file//dir/path}: 将全部 dir 替换为 path: /path1/path2/path3/my.file.txt
    
    利用${ } 还可针对不同的变数状态赋值(没设定、空值、非空值):  
    ${file-my.file.txt}: 假如$file 没有设定,則使用my.file.txt 作传回值。(空值及非空值時不作处理) 
    ${file:-my.file.txt}: 假如$file 没有設定或為空值,則使用my.file.txt 作傳回值。(非空值時不作处理)
    ${file+my.file.txt}: 假如$file 設為空值或非空值,均使用my.file.txt 作傳回值。(没設定時不作处理)
    ${file:+my.file.txt}: 若$file 為非空值,則使用my.file.txt 作傳回值。(没設定及空值時不作处理)
    ${file=my.file.txt}: 若$file 没設定,則使用my.file.txt 作傳回值,同時將$file 賦值為my.file.txt 。(空值及非空值時不作处理)
    ${file:=my.file.txt}: 若$file 没設定或為空值,則使用my.file.txt 作傳回值,同時將$file 賦值為my.file.txt 。(非空值時不作处理)
    ${file?my.file.txt}: 若$file 没設定,則將my.file.txt 輸出至STDERR。(空值及非空值時不作处理)
    
    
    ${file:?my.file.txt}: 若$file 没设定或为空值,则将 my.file.txt 输出至 STDERR。(非空值時不作处理)
    
    ${#var} 可计算出变量值的长度: 
        ${#file} 可得到 27,因为 /dir1/dir2/dir3/my.file.txt 是 27 个字节

shell 脚本中 '' 与 "" 不同,只有 "" 作为最外围的符号时,内部才能取到 $var 的值.'' 只把其中的内容作为字符串.

system("命令"): 把命令传给 shell
